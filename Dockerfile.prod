# Multi-stage build para frontend e backend
FROM node:18-alpine AS frontend-builder

# Definir diretório de trabalho para frontend
WORKDIR /app/frontend

# Copiar package.json e package-lock.json
COPY frontend/package*.json ./

# Instalar dependências do frontend (incluindo dev dependencies para build)
RUN npm install

# Copiar código do frontend
COPY frontend/ ./

# Build do frontend
RUN npm run build

# Stage para o backend
FROM python:3.11-slim

# Definir variáveis de ambiente
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    ffmpeg \
    curl \
    wget \
    gnupg \
    nginx \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usuário não-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Definir diretório de trabalho
WORKDIR /app

# Copiar requirements e instalar dependências Python
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copiar código da aplicação backend
COPY app/ ./app/
COPY alembic/ ./alembic/
COPY alembic.ini ./
COPY run_migration.py ./

# Copiar frontend build do stage anterior
COPY --from=frontend-builder /app/frontend/.next ./frontend/.next
COPY --from=frontend-builder /app/frontend/public ./frontend/public
COPY --from=frontend-builder /app/frontend/package.json ./frontend/package.json
COPY --from=frontend-builder /app/frontend/node_modules ./frontend/node_modules

# Configurar Nginx para servir o frontend
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf

# Criar diretórios necessários e definir permissões
RUN mkdir -p /app/videos/permanent \
    /app/videos/temporary \
    /app/videos/temp \
    /app/logs \
    /app/static \
    /app/media \
    /var/log/nginx \
    && chown -R appuser:appuser /app \
    && chown -R appuser:appuser /var/log/nginx

# Script de inicialização
COPY docker/scripts/start.sh ./start.sh
RUN chmod +x ./start.sh

# Mudar para usuário não-root
USER appuser

# Expor porta
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando padrão (executa migrações, inicia Nginx e depois inicia a API)
CMD ["./start.sh"] 