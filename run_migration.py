#!/usr/bin/env python3
"""
Script para executar migra√ß√µes no Railway
"""
import os
import sys
from alembic.config import Config
from alembic import command

def run_migrations():
    """Executa as migra√ß√µes do Alembic"""
    try:
        # Configurar o Alembic
        alembic_cfg = Config("alembic.ini")
        
        # Verificar o status atual das migra√ß√µes
        print("üîç Verificando status das migra√ß√µes...")
        from alembic.runtime.migration import MigrationContext
        from alembic.script import ScriptDirectory
        from sqlalchemy import create_engine, text
        
        # Obter a URL do banco de dados
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            print("‚ö†Ô∏è DATABASE_URL n√£o encontrada, pulando migra√ß√µes")
            return True
            
        engine = create_engine(database_url)
        
        # Verificar se a tabela alembic_version existe
        with engine.connect() as conn:
            try:
                result = conn.execute(text("SELECT version_num FROM alembic_version"))
                current_version = result.scalar()
                print(f"üìã Vers√£o atual do banco: {current_version}")
            except Exception:
                print("üìã Tabela alembic_version n√£o encontrada, ser√° criada")
                current_version = None
        
        # Executar upgrade head (Alembic vai pular migra√ß√µes j√° aplicadas)
        print("üîÑ Executando migra√ß√µes...")
        command.upgrade(alembic_cfg, "head")
        print("‚úÖ Migra√ß√µes executadas com sucesso!")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        # Se for erro de tabela duplicada, considerar como sucesso
        if "already exists" in str(e):
            print("‚ÑπÔ∏è Tabelas j√° existem, continuando...")
            return True
        return False

if __name__ == "__main__":
    success = run_migrations()
    sys.exit(0 if success else 1) 